#!/bin/sh

cp_p()
{
   strace -q -ewrite cp -ax -- "${1}" "${2}" 2>&1 \
      | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

svn_cleanall()
{
    svn st | awk '{print $2}' | xargs rm -rf
}

git_cleanall()
{
    git clean -xf | awk '{print $3}' | xargs rm -rf
}

git_update_dirs()
{
for x in `ls -d *.git`
do
    echo '======================================================'
    echo -n $x': '
    cd $x && git pull && cd ..
    echo '======================================================'
done
}

git_pruneall()
{
    for x in `git branch -a | grep remotes | cut -f 2 -d '/' | uniq`; do git remote prune $x; done
}


qtenv()
{
    BUILD=$1
    QTBUILDDIR=$HOME/projects/Qt/build/$BUILD
    QTSRC=$HOME/projects/Qt/qt
    if [ $BUILD == '5' ]; then
        QTBUILDDIR=$QTBUILDDIR/qtbase/
        QTSRC=${QTSRC}5
    fi
    QTSRC=${QTSRC}.git

    if [ $# -eq 0 ]; then
        echo "You must inform the build name!"
    fi
	echo "Using Qt" $BUILD
    export QTDIR=$QTBUILDDIR
    export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
    export LIBRARY_PATH=$QTDIR/lib:$LIBRARY_PATH
    export QML_IMPORT_PATH=$QTDIR/imports/
    export QML_PLUGIN_PATH=$QTDIR/plugins/
    export PATH=$QTDIR/bin:$PATH
}

qs()
{
    qtenv 5
    cd $QTSRC/$1
}

qb()
{
    qtenv 5
    cd $QTDIR/../$1
}

wk2_env()
{
    WEBKIT_BUILD_PATH=$HOME/projects/Qt/webkit.git/WebKitBuild/Release/
    qtenv 5
    echo "Using WebKit Release"
    export QML_IMPORT_PATH=$QML_IMPORT_PATH:$WEBKIT_BUILD_PATH/imports
    export QML_PLUGIN_PATH=$QML_PLUGIN_PATH:$WEBKIT_BUILD_PATH
    export PATH=$WEBKIT_BUILD_PATH/bin/:$PATH
}

rename_without_spaces()
{
	for i in *; do j=`echo $i | tr ' ' _`; mv "$i" $j; done;
}

qttemplate()
{
    if [ $# -eq 0 ]; then
        FILE="main.cpp"
    else
        FILE=$1
    fi

    echo "#include <QtCore>
#include <QtGui>

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);


    return app.exec();
}" > $FILE
}

buildqt5()
{
    qtenv 5
    qb
    $QTSRC/configure -developer-build -no-gtkstyle -opensource --confirm-license -no-pch
    cd $QTDIR && make -j 100 && make install
    cd $QTDIR/../qtjsbackend && make -j 100 && make install
    cd $QTDIR/../qtscript && make -j 100 && make install
    cd $QTDIR/../qtdeclarative && make -j 100 && make install
}

syncprofile()
{
    MODULE=$1
    qtenv 5
    syncqt $QTSRC/$MODULE/sync.profile
}
